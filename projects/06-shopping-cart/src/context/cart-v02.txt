import { useReducer, createContext, useState } from 'react'

// 1. Crear Contexto
export const CartContext = createContext()

// Utilizando useReducer separamos 'la logica de actualizar el estado' en una funcion totalmente separada,
// --- Para el useReducer creo el ESTADO-INICIAL y el REDUCER ----------
const initialState = []
const reducer = (state, action) => {
  const { type: actionType, payload: actionPayload } = action
  switch (actionType) {
    case 'ADD_TO_CART': {
      const { id } = actionPayload
      const productInCartIndex = state.findIndex(item => item.id === id)

      // Si el prpducto esta en el carrito
      if (productInCartIndex >= 0) {
        const newState = structuredClone(state)
        newState[productInCartIndex].quantity += 1
        return newState
      }
      // Si el producto no esta en el carrito
      return [
        ...state,
        {
          ...actionPayload, // producto
          quantity: 1
        }
      ]
    }

    case 'REMOVE_FROM_CART':{
      const { id } = actionPayload
      return state.filter(item => item.id !== id)
    }

    case 'CLEAR_CART': {
      // return []
      return initialState
    }
  }

  return state
}
/*  La ventaja de utilizar useReducer es que separamos 'la logica de actualizar estado', y esto nos facilita muchisimo la posibilidad e hacer test del estado.
    si utilisamos useState, esta logica esta dentro del componente y hacer test, y comprobar los estados cuesta mucho mas
    con el useState hay que renderizar el componente para testearlo, mientras que con el useReduce solo hay que llamar a la funcion
*/
// ---------------------------------------------------------------

// 2. Crear Provider
export function CartProvider ({ children }) {
  /*
  const [cart, setCart] = useState([])

  const addToCart = product => {
    const productInCartIndex = cart.findIndex(item => item.id === product.id)
    if (productInCartIndex >= 0) {
      const newCart = structuredClone(cart)
      newCart[productInCartIndex].quantity += 1
      return setCart(newCart)
    }

    setCart(prevState => (
      [...prevState,
        {
          ...product,
          quantity: 1
        }
      ]
    ))
  }

  const removeFromCart = product => {
    setCart(prevState => prevState.filter(item => item.id !== product.id))
  }
  const clearCart = () => {
    setCart([])
  }
  */
  const [state, dispatch] = useReducer(reducer, initialState)

  const addToCart = product => dispatch({
    type: 'ADD_TO_CART',
    payload: product
  })

  const removeFromCart = product => dispatch({
    type: 'REMOVE_FROM_CART',
    payload: product
  })

  const clearCart = () => dispatch({ type: 'CLEAR_CART' })

  return (
    <CartContext.Provider value={{
      cart: state,
      addToCart,
      clearCart,
      removeFromCart
    }}
    >
      {children}
    </CartContext.Provider>
  )
}
