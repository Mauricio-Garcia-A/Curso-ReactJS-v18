import { createContext, useState } from 'react'
// 1. Crear Contexto
export const CartContext = createContext()

// 2. Crear Provider
export function CartProvider ({ children }) {
  const [cart, setCart] = useState([])

  // AÃ±adir Producto al Carrito
  const addToCart = product => {
    /* - Forma sencilla de agregar producto
    setCart([... cart, product])
    */
    // Foma mas especifica (chequeando si ya esta agregado en el carrito y sumando uno)
    const productInCartIndex = cart.findIndex(item => item.id === product.id)
    if (productInCartIndex >= 0) {
      // Si encuentro el producto en la lista clono dicha lista, modifica la cantidad de producto selecionado en la nueva lista, la seteo en la original
      const newCart = structuredClone(cart)
      newCart[productInCartIndex].quantity += 1
      return setCart(newCart)
    }

    // El producto no esta en el carrito
    setCart(prevState => (
      [...prevState,
        {
          ...product,
          quantity: 1
        }
      ]
    ))
  }

  // Remover producto del carrito
  const removeFromCart = product => {
    /* - Forma normal de actualizar el estado (puede fallar. esta puede tener una res condition y no accede al ultimo valor que puede tener ) */
    // De esta forma funciona pero un buena practica es utilizar el estado anterior, porque en siertos casos esta forma puede fallar
    // setCart(cart.filter(item => item.id !== product.id))

    setCart(prevState => prevState.filter(item => item.id !== product.id))
  }
  // Limpiar Carrito
  const clearCart = () => {
    setCart([])
  }

  return (
    <CartContext.Provider value={{
      cart,
      addToCart,
      clearCart,
      removeFromCart
    }}
    >
      {children}
    </CartContext.Provider>
  )
}
